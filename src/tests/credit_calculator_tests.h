#ifndef TESTS_CREDIT_CALCULATOR_TESTS_H_
#define TESTS_CREDIT_CALCULATOR_TESTS_H_

#include <gtest/gtest.h>

#include <iostream>
#include <tuple>

#include "credit_calc.h"
#include "tests_misc.h"

constexpr double kPrecision = 1;

using credit_calculator_test_input_type =
    std::tuple<double, std::size_t, s21::model::TermType, double,
               s21::model::RateType, s21::model::CreditCalculator::CreditType>;

using credit_calculator_test_result_type =
    std::vector<s21::model::CreditCalculator::record_type>;

using credit_calculator_test_case_type =
    std::pair<credit_calculator_test_input_type,
              credit_calculator_test_result_type>;

using credit_calculator_test_case_storage_type =
    std::vector<credit_calculator_test_case_type>;

inline credit_calculator_test_case_storage_type kAnnuityTestCases{
    {// input
     {1'000'000.00, 1, s21::model::TermType::kYears, 9.0,
      s21::model::RateType::kPerAnnum,
      s21::model::CreditCalculator::CreditType::kAnnuity},
     // result
     {{87'451.48, 79'951.48, 7'500.00, 920'048.52},
      {87'451.48, 80'551.12, 6'900.36, 839'497.40},
      {87'451.48, 81'155.25, 6'296.23, 758'342.15},
      {87'451.48, 81'763.91, 5'687.57, 676'578.24},
      {87'451.48, 82'377.14, 5'074.34, 594'201.10},
      {87'451.48, 82'994.97, 4'456.51, 511'206.13},
      {87'451.48, 83'617.43, 3'834.05, 427'588.70},
      {87'451.48, 84'244.56, 3'206.92, 343'344.14},
      {87'451.48, 84'876.40, 2'575.08, 258'467.74},
      {87'451.48, 85'512.97, 1'938.51, 172'954.77},
      {87'451.48, 86'154.32, 1'297.16, 86'800.45},
      {87'451.48, 86'800.48, 651.00, -0.03},
      {1'049'417.76, 1'000'000.03, 49'417.73, 0.0}}},
    // next test
    {// input
     {4'000'000.00, 2, s21::model::TermType::kYears, 7.45,
      s21::model::RateType::kPerAnnum,
      s21::model::CreditCalculator::CreditType::kAnnuity},
     // result
     {{179'907.44, 155'074.11, 24'833.33, 3'844'925.89},
      {179'907.44, 156'036.86, 23'870.58, 3'688'889.03},
      {179'907.44, 157'005.59, 22'901.85, 3'531'883.44},
      {179'907.44, 157'980.33, 21'927.11, 3'373'903.11},
      {179'907.44, 158'961.12, 20'946.32, 3'214'941.99},
      {179'907.44, 159'948.01, 19'959.43, 3'054'993.98},
      {179'907.44, 160'941.02, 18'966.42, 2'894'052.96},
      {179'907.44, 161'940.19, 17'967.25, 2'732'112.77},
      {179'907.44, 162'945.57, 16'961.87, 2'569'167.20},
      {179'907.44, 163'957.19, 15'950.25, 2'405'210.01},
      {179'907.44, 164'975.09, 14'932.35, 2'240'234.92},
      {179'907.44, 165'999.31, 13'908.13, 2'074'235.61},
      {179'907.44, 167'029.89, 12'877.55, 1'907'205.72},
      {179'907.44, 168'066.87, 11'840.57, 1'739'138.85},
      {179'907.44, 169'110.29, 10'797.15, 1'570'028.56},
      {179'907.44, 170'160.18, 9'747.26, 1'399'868.38},
      {179'907.44, 171'216.59, 8'690.85, 1'228'651.79},
      {179'907.44, 172'279.56, 7'627.88, 1'056'372.23},
      {179'907.44, 173'349.13, 6'558.31, 883'023.10},
      {179'907.44, 174'425.34, 5'482.10, 708'597.76},
      {179'907.44, 175'508.23, 4'399.21, 533'089.53},
      {179'907.44, 176'597.84, 3'309.60, 356'491.69},
      {179'907.44, 177'694.22, 2'213.22, 178'797.47},
      {179'907.44, 178'797.41, 1'110.03, 0.06},
      {4'317'778.56, 3'999'999.94, 317'778.62, 0.00}}},
    // next test
    {// input
     {350'000.00, 4, s21::model::TermType::kMonths, 11.92 / 12,
      s21::model::RateType::kPerMonth,
      s21::model::CreditCalculator::CreditType::kAnnuity},
     // result
     {{89'683.66, 86'206.99, 3'476.67, 263'793.01},
      {89'683.66, 87'063.32, 2'620.34, 176'729.69},
      {89'683.66, 87'928.15, 1'755.51, 88'801.54},
      {89'683.66, 88'801.56, 882.10, -0.02},
      {358'734.64, 350'000.02, 8'734.62, 0.00}}},
    // next_test
    {// input
     {1'500'000.00, 9, s21::model::TermType::kMonths, 13.78,
      s21::model::RateType::kPerAnnum,
      s21::model::CreditCalculator::CreditType::kAnnuity},
     // result
     {{176'381.77, 159'156.77, 17'225.00, 1'340'843.23},
      {176'381.77, 160'984.42, 15'397.35, 1'179'858.81},
      {176'381.77, 162'833.06, 13'548.71, 1'017'025.75},
      {176'381.77, 164'702.92, 11'678.85, 852'322.83},
      {176'381.77, 166'594.26, 9'787.51, 685'728.57},
      {176'381.77, 168'507.32, 7'874.45, 517'221.25},
      {176'381.77, 170'442.35, 5'939.42, 346'778.90},
      {176'381.77, 172'399.59, 3'982.18, 174'379.31},
      {176'381.77, 174'379.31, 2'002.46, 0.00},
      {1'587'435.93, 1'500'000.00, 87'435.93, 0.00}}},
    // next test
    {// input
     {123'456'789.00, 2, s21::model::TermType::kYears, 22.98,
      s21::model::RateType::kPerAnnum,
      s21::model::CreditCalculator::CreditType::kAnnuity},
     // result
     {{6'464'614.40, 4'100'416.89, 2'364'197.51, 119'356'372.11},
      {6'464'614.40, 4'178'939.87, 2'285'674.53, 115'177'432.24},
      {6'464'614.40, 4'258'966.57, 2'205'647.83, 110'918'465.67},
      {6'464'614.40, 4'340'525.78, 2'124'088.62, 106'577'939.89},
      {6'464'614.40, 4'423'646.85, 2'040'967.55, 102'154'293.04},
      {6'464'614.40, 4'508'359.69, 1'956'254.71, 97'645'933.35},
      {6'464'614.40, 4'594'694.78, 1'869'919.62, 93'051'238.57},
      {6'464'614.40, 4'682'683.18, 1'781'931.22, 88'368'555.39},
      {6'464'614.40, 4'772'356.56, 1'692'257.84, 83'596'198.83},
      {6'464'614.40, 4'863'747.19, 1'600'867.21, 78'732'451.64},
      {6'464'614.40, 4'956'887.95, 1'507'726.45, 73'775'563.69},
      {6'464'614.40, 5'051'812.36, 1'412'802.04, 68'723'751.33},
      {6'464'614.40, 5'148'554.56, 1'316'059.84, 63'575'196.77},
      {6'464'614.40, 5'247'149.38, 1'217'465.02, 58'328'047.39},
      {6'464'614.40, 5'347'632.29, 1'116'982.11, 52'980'415.10},
      {6'464'614.40, 5'450'039.45, 1'014'574.95, 47'530'375.65},
      {6'464'614.40, 5'554'407.71, 910'206.69, 41'975'967.94},
      {6'464'614.40, 5'660'774.61, 803'839.79, 36'315'193.33},
      {6'464'614.40, 5'769'178.45, 695'435.95, 30'546'014.88},
      {6'464'614.40, 5'879'658.22, 584'956.18, 24'666'356.66},
      {6'464'614.40, 5'992'253.67, 472'360.73, 18'674'102.99},
      {6'464'614.40, 6'107'005.33, 357'609.07, 12'567'097.66},
      {6'464'614.40, 6'223'954.48, 240'659.92, 6'343'143.18},
      {6'464'614.40, 6'343'143.21, 121'471.19, -0.03},
      {155'150'745.60, 123'456'789.03, 31'693'956.57, 0.00}}}};

inline credit_calculator_test_case_storage_type kDifferentiatedTestCases{
    {// input
     {100'000.00, 8, s21::model::TermType::kMonths, 9.13,
      s21::model::RateType::kPerAnnum,
      s21::model::CreditCalculator::CreditType::kDifferentiated},
     // result
     {{13'260.83, 12'500.00, 760.83, 87'500.00},
      {13'165.73, 12'500.00, 665.73, 75'000.00},
      {13'070.63, 12'500.00, 570.63, 62'500.00},
      {12'975.52, 12'500.00, 475.52, 50'000.00},
      {12'880.42, 12'500.00, 380.42, 37'500.00},
      {12'785.31, 12'500.00, 285.31, 25'000.00},
      {12'690.21, 12'500.00, 190.21, 12'500.00},
      {12'595.10, 12'500.00, 95.10, 0.00},
      {103'423.75, 100'000.00, 3'423.75, 0.00}}},
    // next test
    {// input
     {1'000'000.00, 20, s21::model::TermType::kMonths, 1,
      s21::model::RateType::kPerMonth,
      s21::model::CreditCalculator::CreditType::kDifferentiated},
     // result
     {{60'000.00, 50'000.00, 10'000.00, 950'000.00},
      {59'500.00, 50'000.00, 9'500.00, 900'000.00},
      {59'000.00, 50'000.00, 9'000.00, 850'000.00},
      {58'500.00, 50'000.00, 8'500.00, 800'000.00},
      {58'000.00, 50'000.00, 8'000.00, 750'000.00},
      {57'500.00, 50'000.00, 7'500.00, 700'000.00},
      {57'000.00, 50'000.00, 7'000.00, 650'000.00},
      {56'500.00, 50'000.00, 6'500.00, 600'000.00},
      {56'000.00, 50'000.00, 6'000.00, 550'000.00},
      {55'500.00, 50'000.00, 5'500.00, 500'000.00},
      {55'000.00, 50'000.00, 5'000.00, 450'000.00},
      {54'500.00, 50'000.00, 4'500.00, 400'000.00},
      {54'000.00, 50'000.00, 4'000.00, 350'000.00},
      {53'500.00, 50'000.00, 3'500.00, 300'000.00},
      {53'000.00, 50'000.00, 3'000.00, 250'000.00},
      {52'500.00, 50'000.00, 2'500.00, 200'000.00},
      {52'000.00, 50'000.00, 2'000.00, 150'000.00},
      {51'500.00, 50'000.00, 1'500.00, 100'000.00},
      {51'000.00, 50'000.00, 1'000.00, 50'000.00},
      {50'500.00, 50'000.00, 500.00, 0.00},
      {1'105'000.00, 1'000'000.00, 105'000.00, 0.00}}},
    // next test
    {// input
     {200'000.00, 1, s21::model::TermType::kYears, 7.55,
      s21::model::RateType::kPerAnnum,
      s21::model::CreditCalculator::CreditType::kDifferentiated},
     // result
     {{17'925.00, 16'666.67, 1'258.33, 183'333.33},
      {17'820.14, 16'666.67, 1'153.47, 166'666.67},
      {17'715.28, 16'666.67, 1'048.61, 150'000.00},
      {17'610.42, 16'666.67, 943.75, 133'333.33},
      {17'505.56, 16'666.67, 838.89, 116'666.67},
      {17'400.69, 16'666.67, 734.03, 100'000.00},
      {17'295.83, 16'666.67, 629.17, 83'333.33},
      {17'190.97, 16'666.67, 524.31, 66'666.67},
      {17'086.11, 16'666.67, 419.44, 50'000.00},
      {16'981.25, 16'666.67, 314.58, 33'333.33},
      {16'876.39, 16'666.67, 209.72, 16'666.67},
      {16'771.53, 16'666.67, 104.86, 0.00},
      {208'179.17, 200'000.00, 8'179.17, 0.00}}},
    // next test
    {// input
     {456'654.00, 2, s21::model::TermType::kYears, 67.12,
      s21::model::RateType::kPerAnnum,
      s21::model::CreditCalculator::CreditType::kDifferentiated},
     // result
     {{44'569.43, 19'027.25, 25'542.18, 437'626.75},
      {43'505.17, 19'027.25, 24'477.92, 418'599.50},
      {42'440.92, 19'027.25, 23'413.67, 399'572.25},
      {41'376.66, 19'027.25, 22'349.41, 380'545.00},
      {40'312.40, 19'027.25, 21'285.15, 361'517.75},
      {39'248.14, 19'027.25, 20'220.89, 342'490.50},
      {38'183.89, 19'027.25, 19'156.64, 323'463.25},
      {37'119.63, 19'027.25, 18'092.38, 304'436.00},
      {36'055.37, 19'027.25, 17'028.12, 285'408.75},
      {34'991.11, 19'027.25, 15'963.86, 266'381.50},
      {33'926.86, 19'027.25, 14'899.61, 247'354.25},
      {32'862.60, 19'027.25, 13'835.35, 228'327.00},
      {31'798.34, 19'027.25, 12'771.09, 209'299.75},
      {30'734.08, 19'027.25, 11'706.83, 190'272.50},
      {29'669.83, 19'027.25, 10'642.58, 171'245.25},
      {28'605.57, 19'027.25, 9'578.32, 152'218.00},
      {27'541.31, 19'027.25, 8'514.06, 133'190.75},
      {26'477.05, 19'027.25, 7'449.80, 114'163.50},
      {25'412.80, 19'027.25, 6'385.55, 95'136.25},
      {24'348.54, 19'027.25, 5'321.29, 76'109.00},
      {23'284.28, 19'027.25, 4'257.03, 57'081.75},
      {22'220.02, 19'027.25, 3'192.77, 38'054.50},
      {21'155.77, 19'027.25, 2'128.52, 19'027.25},
      {20'091.51, 19'027.25, 1'064.26, 0.00},
      {775'931.26, 456'654.00, 319'277.26, 0.00}}},
    // next test
    {// input
     {20'000.00, 2, s21::model::TermType::kMonths, 2.88,
      s21::model::RateType::kPerAnnum,
      s21::model::CreditCalculator::CreditType::kDifferentiated},
     // result
     {{10'048.00, 10'000.00, 48.00, 10'000.00},
      {10'024.00, 10'000.00, 24.00, 0.00},
      {20'072.00, 20'000.00, 72.00, 0.00}}}};

inline double GetSum(const credit_calculator_test_case_type& test_case);

inline std::size_t GetTerm(const credit_calculator_test_case_type& test_case);

inline s21::model::TermType GetTermType(
    const credit_calculator_test_case_type& test_case);

inline double GetRate(const credit_calculator_test_case_type& test_case);

inline s21::model::RateType GetRateType(
    const credit_calculator_test_case_type& test_case);

inline s21::model::CreditCalculator::CreditType GetCreditType(
    const credit_calculator_test_case_type& test_case);

inline s21::model::CreditCalculator::Parameters CreateParameters(
    const credit_calculator_test_case_type& test_case);

inline const std::string ParamsMsg(
    const credit_calculator_test_case_type& test_case);

inline void TestCreditCalculatorOneCase(
    const credit_calculator_test_case_type& test_case);

#endif  // TESTS_CREDIT_CALCULATOR_TESTS_H_